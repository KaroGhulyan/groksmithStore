{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, QueryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nconst storeService = new StoreService();\nconst queryClient = new QueryClient();\nexport const useCategories = () => {\n  _s();\n\n  return useQuery(['categories'], storeService.getCategories);\n};\n\n_s(useCategories, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useCategory = () => {\n  _s2();\n\n  return useQuery(['categories', category], storeService.getCategory);\n}; // export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n_s2(useCategory, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/categories.ts"],"names":["useQuery","QueryClient","StoreService","storeService","queryClient","useCategories","getCategories","useCategory","category","getCategory"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,aAAtC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAGA,MAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB;AAEA,MAAME,WAAW,GAAG,IAAIH,WAAJ,EAApB;AAKA,OAAO,MAAMI,aAAa,GAAG;AAAA;;AAAA,SAAML,QAAQ,CAAC,CAAC,YAAD,CAAD,EAAiBG,YAAY,CAACG,aAA9B,CAAd;AAAA,CAAtB;;GAAMD,a;UAAsBL,Q;;;AACnC,OAAO,MAAMO,WAAW,GAAG;AAAA;;AAAA,SAAMP,QAAQ,CAAC,CAAC,YAAD,EAAcQ,QAAd,CAAD,EAA0BL,YAAY,CAACM,WAAvC,CAAd;AAAA,CAApB,C,CAGP;AACA;AACA;;IALaF,W;UAAoBP,Q","sourcesContent":["import { Product } from './../interfaces';\nimport { useQuery, QueryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\n\n\nconst storeService = new StoreService();\n\nconst queryClient = new QueryClient() as any\n\n\n\n\nexport const useCategories = () => useQuery(['categories'], storeService.getCategories);\nexport const useCategory = () => useQuery(['categories',category], storeService.getCategory);\n\n\n// export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}