{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nimport { Category } from '../components/pages';\nconst storeService = new StoreService(); // const queryClient = new QueryClient() as any\n\nexport const useCategories = () => {\n  _s();\n\n  return useQuery(['categories'], storeService.getCategories);\n};\n\n_s(useCategories, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useCategory = () => {\n  _s2();\n\n  return useQuery(['categories'], () => storeService.getCategory(Category));\n}; // export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n_s2(useCategory, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/categories.ts"],"names":["useQuery","StoreService","Category","storeService","useCategories","getCategories","useCategory","getCategory"],"mappings":";;;AACA,SAASA,QAAT,QAAsC,aAAtC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAGA,MAAMC,YAAY,GAAG,IAAIF,YAAJ,EAArB,C,CAEA;;AAKA,OAAO,MAAMG,aAAa,GAAG;AAAA;;AAAA,SAAMJ,QAAQ,CAAC,CAAC,YAAD,CAAD,EAAiBG,YAAY,CAACE,aAA9B,CAAd;AAAA,CAAtB;;GAAMD,a;UAAsBJ,Q;;;AACnC,OAAO,MAAMM,WAAW,GAAG;AAAA;;AAAA,SAAMN,QAAQ,CAAC,CAAC,YAAD,CAAD,EAAiB,MAAIG,YAAY,CAACI,WAAb,CAAyBL,QAAzB,CAArB,CAAd;AAAA,CAApB,C,CAGP;AACA;AACA;;IALaI,W;UAAoBN,Q","sourcesContent":["import { Product } from '../interfaces';\nimport { useQuery, QueryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nimport { Category } from '../components/pages';\n\n\nconst storeService = new StoreService();\n\n// const queryClient = new QueryClient() as any\n\n\n\n\nexport const useCategories = () => useQuery(['categories'], storeService.getCategories);\nexport const useCategory = () => useQuery(['categories'], ()=>storeService.getCategory(Category));\n\n\n// export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}