{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, queryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nconst storeService = new StoreService();\nconsole.log(query);\nexport const useProducts = () => {\n  _s();\n\n  return useQuery(['products'], storeService.getProducts);\n};\n\n_s(useProducts, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useProduct = productId => {\n  _s2();\n\n  return useQuery(['product', productId], () => storeService.getProduct(productId), {\n    initialData: () => {\n      var _queryClient$getQuery;\n\n      return (_queryClient$getQuery = queryClient.getQueryData('products')) === null || _queryClient$getQuery === void 0 ? void 0 : _queryClient$getQuery.find(d => d.id === productId);\n    }\n  });\n};\n\n_s2(useProduct, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/products.ts"],"names":["useQuery","queryClient","StoreService","storeService","console","log","query","useProducts","getProducts","useProduct","productId","getProduct","initialData","getQueryData","find","d","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAqC,aAArC;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AAGA,MAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB;AAIAE,OAAO,CAACC,GAAR,CAAYC,KAAZ;AAEA,OAAO,MAAMC,WAAW,GAAG;AAAA;;AAAA,SAAMP,QAAQ,CAAC,CAAC,UAAD,CAAD,EAAeG,YAAY,CAACK,WAA5B,CAAd;AAAA,CAApB;;GAAMD,W;UAAoBP,Q;;;AACjC,OAAO,MAAMS,UAAU,GAAIC,SAAD;AAAA;;AAAA,SAAuBV,QAAQ,CAAC,CAAC,SAAD,EAAYU,SAAZ,CAAD,EAAyB,MAAMP,YAAY,CAACQ,UAAb,CAAwBD,SAAxB,CAA/B,EAAkE;AACzHE,IAAAA,WAAW,EAAE;AAAA;;AAAA,sCAAMX,WAAW,CAACY,YAAZ,CAAyB,UAAzB,CAAN,0DAAM,sBAAsCC,IAAtC,CAA2CC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,SAAzD,CAAN;AAAA;AAD4G,GAAlE,CAA/B;AAAA,CAAnB;;IAAMD,U;UAAoCT,Q","sourcesContent":["import { useQuery, queryClient} from \"react-query\";\nimport { Product } from \"../interfaces\";\nimport StoreService from \"../services/store-service\";\n\n\nconst storeService = new StoreService();\n\n\n\nconsole.log(query);\n\nexport const useProducts = () => useQuery(['products'], storeService.getProducts)\nexport const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId),{\n  initialData: () => queryClient.getQueryData('products')?.find(d => d.id === productId)\n})\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}