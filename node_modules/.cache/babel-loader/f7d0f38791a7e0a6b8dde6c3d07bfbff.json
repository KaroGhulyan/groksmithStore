{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, QueryCache } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nconst storeService = new StoreService();\nconst queryCache = new QueryCache({\n  onError: error => {\n    console.log(error);\n  },\n  onSuccess: data => {\n    console.log(data);\n  }\n});\nconst query = queryCache.find('products');\nconsole.log(query);\nexport const useProducts = () => {\n  _s();\n\n  return useQuery(['products'], storeService.getProducts);\n};\n\n_s(useProducts, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useProduct = productId => {\n  _s2();\n\n  return useQuery(['product', productId], () => storeService.getProduct(productId), {// initialData:()=>queryCache.get()\n  });\n};\n\n_s2(useProduct, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/products.ts"],"names":["useQuery","QueryCache","StoreService","storeService","queryCache","onError","error","console","log","onSuccess","data","query","find","useProducts","getProducts","useProduct","productId","getProduct"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAoC,aAApC;AAEA,OAAOC,YAAP,MAAyB,2BAAzB;AAGA,MAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB;AAEA,MAAME,UAAU,GAAG,IAAIH,UAAJ,CAAe;AAChCI,EAAAA,OAAO,EAAEC,KAAK,IAAI;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,GAH+B;AAIhCG,EAAAA,SAAS,EAAEC,IAAI,IAAI;AACjBH,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;AACD;AAN+B,CAAf,CAAnB;AASA,MAAMC,KAAK,GAAGP,UAAU,CAACQ,IAAX,CAAgB,UAAhB,CAAd;AACAL,OAAO,CAACC,GAAR,CAAYG,KAAZ;AAEA,OAAO,MAAME,WAAW,GAAG;AAAA;;AAAA,SAAMb,QAAQ,CAAC,CAAC,UAAD,CAAD,EAAeG,YAAY,CAACW,WAA5B,CAAd;AAAA,CAApB;;GAAMD,W;UAAoBb,Q;;;AACjC,OAAO,MAAMe,UAAU,GAAIC,SAAD;AAAA;;AAAA,SAAuBhB,QAAQ,CAAC,CAAC,SAAD,EAAYgB,SAAZ,CAAD,EAAyB,MAAMb,YAAY,CAACc,UAAb,CAAwBD,SAAxB,CAA/B,EAAkE,CACzH;AADyH,GAAlE,CAA/B;AAAA,CAAnB;;IAAMD,U;UAAoCf,Q","sourcesContent":["import { useQuery ,QueryCache} from \"react-query\";\nimport { Product } from \"../interfaces\";\nimport StoreService from \"../services/store-service\";\n\n\nconst storeService = new StoreService();\n\nconst queryCache = new QueryCache({\n  onError: error => {\n    console.log(error)\n  },\n  onSuccess: data => {\n    console.log(data)\n  }\n})\n\nconst query = queryCache.find('products')\nconsole.log(query);\n\nexport const useProducts = () => useQuery(['products'], storeService.getProducts)\nexport const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId),{\n  // initialData:()=>queryCache.get()\n})\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}