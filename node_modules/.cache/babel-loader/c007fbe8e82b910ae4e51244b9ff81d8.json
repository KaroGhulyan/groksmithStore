{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nconst storeService = new StoreService(); // const queryClient = new QueryClient() as any\n\nexport const useCategories = () => useQuery < UseQueryOptions >> (['categories'], storeService.getCategories);\nexport const useCategory = category => {\n  _s();\n\n  return useQuery(['categories', category], () => storeService.getCategory(category));\n}; // export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n_s(useCategory, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/categories.ts"],"names":["useQuery","StoreService","storeService","useCategories","UseQueryOptions","getCategories","useCategory","category","getCategory"],"mappings":";;AACA,SAASA,QAAT,QAAsC,aAAtC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAGA,MAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB,C,CAEA;;AAKA,OAAO,MAAME,aAAa,GAAG,MAAMH,QAAQ,GAAGI,eAAe,KAAG,CAAC,YAAD,GAAgBF,YAAY,CAACG,aAAhC,CAAtD;AACP,OAAO,MAAMC,WAAW,GAAIC,QAAD;AAAA;;AAAA,SAAsBP,QAAQ,CAAC,CAAC,YAAD,EAAeO,QAAf,CAAD,EAA2B,MAAML,YAAY,CAACM,WAAb,CAAyBD,QAAzB,CAAjC,CAA9B;AAAA,CAApB,C,CAGP;AACA;AACA;;GALaD,W;UAAoCN,Q","sourcesContent":["import { Product } from '../interfaces';\nimport { useQuery, QueryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\n\n\nconst storeService = new StoreService();\n\n// const queryClient = new QueryClient() as any\n\n\n\n\nexport const useCategories = () => useQuery < UseQueryOptions>>(['categories'], storeService.getCategories);\nexport const useCategory = (category: string) => useQuery(['categories', category], () => storeService.getCategory(category));\n\n\n// export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}