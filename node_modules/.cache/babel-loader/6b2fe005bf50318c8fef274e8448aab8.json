{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery, QueryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nconst storeService = new StoreService();\nconst {\n  queryCache\n} = new QueryClient();\nexport const useProducts = () => {\n  _s();\n\n  return useQuery(['products'], storeService.getProducts);\n};\n\n_s(useProducts, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useProduct = productId => {\n  _s2();\n\n  return useQuery(['product', productId], () => storeService.getProduct(productId), {\n    initialData: () => {\n      var _queryCache$getQueryD;\n\n      return (_queryCache$getQueryD = queryCache.getQueryData('products')) === null || _queryCache$getQueryD === void 0 ? void 0 : _queryCache$getQueryD.find(product => product.id === productId);\n    }\n  });\n};\n\n_s2(useProduct, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/products.ts"],"names":["useQuery","QueryClient","StoreService","storeService","queryCache","useProducts","getProducts","useProduct","productId","getProduct","initialData","getQueryData","find","product","id"],"mappings":";;;AACA,SAASA,QAAT,EAAmBC,WAAnB,QAAqC,aAArC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAGA,MAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB;AAEA,MAAM;AAAEE,EAAAA;AAAF,IAAgB,IAAIH,WAAJ,EAAtB;AAKA,OAAO,MAAMI,WAAW,GAAG;AAAA;;AAAA,SAAML,QAAQ,CAAC,CAAC,UAAD,CAAD,EAAeG,YAAY,CAACG,WAA5B,CAAd;AAAA,CAApB;;GAAMD,W;UAAoBL,Q;;;AAEjC,OAAO,MAAMO,UAAU,GAAIC,SAAD;AAAA;;AAAA,SAAuBR,QAAQ,CAAC,CAAC,SAAD,EAAYQ,SAAZ,CAAD,EAAyB,MAAML,YAAY,CAACM,UAAb,CAAwBD,SAAxB,CAA/B,EAAkE;AACzHE,IAAAA,WAAW,EAAE;AAAA;;AAAA,sCAAMN,UAAU,CAACO,YAAX,CAAwB,UAAxB,CAAN,0DAAM,sBAAqCC,IAArC,CAA2CC,OAAD,IAAiBA,OAAO,CAACC,EAAR,KAAeN,SAA1E,CAAN;AAAA;AAD4G,GAAlE,CAA/B;AAAA,CAAnB;;IAAMD,U;UAAoCP,Q","sourcesContent":["import { Product } from './../interfaces';\nimport { useQuery, QueryClient} from \"react-query\";\nimport StoreService from \"../services/store-service\";\n\n\nconst storeService = new StoreService();\n\nconst { queryCache} = new QueryClient()\n\n\n\n\nexport const useProducts = () => useQuery(['products'], storeService.getProducts)\n\nexport const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId),{\n  initialData: () => queryCache.getQueryData('products')?.find((product:any) => product.id === productId)\n})\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}