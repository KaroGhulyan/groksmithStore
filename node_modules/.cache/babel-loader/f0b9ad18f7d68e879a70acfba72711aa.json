{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { ProductActionType } from './types';\nimport { getProductsUrl } from '../config/config.json';\nimport { useQuery } from 'react-query';\n\nconst fetchProducts = async () => {\n  const response = await axios.get(getProductsUrl);\n  return response;\n};\n\nconst getProducts = () => {\n  _s();\n\n  const {\n    data,\n    status\n  } = useQuery('products', fetchProducts);\n  console.log(data);\n  return async dispatch => {\n    try {\n      dispatch({\n        type: ProductActionType.getProducts,\n        payload: []\n      });\n      const response = await axios.get(getProductsUrl);\n      dispatch({\n        type: ProductActionType.getProductsSuccess,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: ProductActionType.getProductsError,\n        payload: 'Error'\n      });\n    }\n  };\n};\n\n_s(getProducts, \"r91jLNwsqTqZNm64JWU7RjPAH/8=\", false, function () {\n  return [useQuery];\n});\n\nexport { getProducts };","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/actions/products.ts"],"names":["axios","ProductActionType","getProductsUrl","useQuery","fetchProducts","response","get","getProducts","data","status","console","log","dispatch","type","payload","getProductsSuccess","error","getProductsError"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAwBC,iBAAxB,QAAiD,SAAjD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;;AAGA,MAAMC,aAAa,GAAG,YAAU;AAC9B,QAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUJ,cAAV,CAAvB;AACA,SAAOG,QAAP;AAED,CAJD;;AAOA,MAAME,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAmBN,QAAQ,CAAC,UAAD,EAAaC,aAAb,CAAjC;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEA,SAAO,MAAOI,QAAP,IAA6C;AAClD,QAAI;AAEFA,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEZ,iBAAiB,CAACM,WAA1B;AAAuCO,QAAAA,OAAO,EAAE;AAAhD,OAAD,CAAR;AACA,YAAMT,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAUJ,cAAV,CAAvB;AAGAU,MAAAA,QAAQ,CAAC;AACPC,QAAAA,IAAI,EAAEZ,iBAAiB,CAACc,kBADjB;AAEPD,QAAAA,OAAO,EAAET,QAAQ,CAACG;AAFX,OAAD,CAAR;AAKD,KAXD,CAWE,OAAOQ,KAAP,EAAc;AACdJ,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEZ,iBAAiB,CAACgB,gBAA1B;AAA4CH,QAAAA,OAAO,EAAE;AAArD,OAAD,CAAR;AACD;AAEF,GAhBD;AAiBD,CArBD;;GAAMP,W;UACqBJ,Q;;;AAqB3B,SACEI,WADF","sourcesContent":["import axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ProductAction, ProductActionType } from './types';\nimport { getProductsUrl } from '../config/config.json'\nimport { useQuery } from 'react-query';\n\n\nconst fetchProducts = async ()=>{\n  const response = await axios.get(getProductsUrl);\n  return response\n\n}\n\n\nconst getProducts = () => {\n  const { data, status } = useQuery('products', fetchProducts)\n  console.log(data);\n  \n  return async (dispatch: Dispatch<ProductAction>) => {\n    try {\n\n      dispatch({ type: ProductActionType.getProducts, payload: [] })\n      const response = await axios.get(getProductsUrl);\n    \n\n      dispatch({\n        type: ProductActionType.getProductsSuccess,\n        payload: response.data\n      })\n\n    } catch (error) {\n      dispatch({ type: ProductActionType.getProductsError, payload: 'Error' })\n    }\n\n  }\n}\nexport {\n  getProducts\n}"]},"metadata":{},"sourceType":"module"}