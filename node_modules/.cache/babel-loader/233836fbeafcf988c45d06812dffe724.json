{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useQuery } from \"react-query\";\nimport StoreService from \"../services/store-service\";\nconst storeService = new StoreService(); // const queryClient = new QueryClient() as any\n\nexport const useCategories = () => {\n  _s();\n\n  return useQuery(['categories'], storeService.getCategories);\n};\n\n_s(useCategories, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\n\nexport const useCategory = cate => {\n  _s2();\n\n  return useQuery(['categories'], storeService.getCategory());\n}; // export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n_s2(useCategory, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/karo/Desktop/TS/groksmithStore/src/hooks/categories.ts"],"names":["useQuery","StoreService","storeService","useCategories","getCategories","useCategory","cate","getCategory"],"mappings":";;;AACA,SAASA,QAAT,QAAsC,aAAtC;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AAGA,MAAMC,YAAY,GAAG,IAAID,YAAJ,EAArB,C,CAEA;;AAKA,OAAO,MAAME,aAAa,GAAG;AAAA;;AAAA,SAAMH,QAAQ,CAAC,CAAC,YAAD,CAAD,EAAiBE,YAAY,CAACE,aAA9B,CAAd;AAAA,CAAtB;;GAAMD,a;UAAsBH,Q;;;AACnC,OAAO,MAAMK,WAAW,GAAIC,IAAD;AAAA;;AAAA,SAAUN,QAAQ,CAAC,CAAC,YAAD,CAAD,EAAiBE,YAAY,CAACK,WAAb,EAAjB,CAAlB;AAAA,CAApB,C,CAGP;AACA;AACA;;IALaF,W;UAAwBL,Q","sourcesContent":["import { Product } from '../interfaces';\nimport { useQuery, QueryClient } from \"react-query\";\nimport StoreService from \"../services/store-service\";\n\n\nconst storeService = new StoreService();\n\n// const queryClient = new QueryClient() as any\n\n\n\n\nexport const useCategories = () => useQuery(['categories'], storeService.getCategories);\nexport const useCategory = (cate) => useQuery(['categories'], storeService.getCategory());\n\n\n// export const useProduct = (productId: number) => useQuery(['product', productId], () => storeService.getProduct(productId), {\n//   initialData: () => queryClient.getQueryData('products')?.find((product: Product) => product.id === productId)\n// })\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}